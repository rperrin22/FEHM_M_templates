classdef genMesh
    %UNTITLED7 Summary of this class goes here
    %   Detailed explanation goes here

    properties
        mesh_prefix  % prefix applied to all meshing files
        xlims % x limits
        ylims % y limits
        zlims % z limits
        nx % number of cells in the x-direction
        ny % number of cells in the y-direction
        nz % number of cells in the z-direction
        model_base_filename % model base xyz filename
        crust_bottom_filename % bottom of the crust xyz filename
        crust_top_filename % top of the crust xyz filename
        seafloor_filename % seafloor xyz filename
        triangulate_filename % mesh triangulate (.lgi) filename
        meshing_filename % build mesh (.lgi) filename
        triangulate_command % lagrit triangulate command
        meshing_command % lagrit meshing command
    end

    methods
        function obj = genMesh(mesh_prefix,nx,ny,nz)
            % genMesh
            % initialize the class
            obj.mesh_prefix = mesh_prefix;
            obj.model_base_filename = 'model_base.xyz'; % default name
            obj.crust_bottom_filename = 'crust_bottom.xyz'; % default name
            obj.crust_top_filename = 'crust_top.xyz'; % default name
            obj.seafloor_filename = 'seafloor.xyz'; % default name
            obj.nx = nx;
            obj.ny = ny;
            obj.nz = nz;
            obj.triangulate_filename = sprintf('%s_triangulate.lgi',mesh_prefix);
            obj.meshing_filename = sprintf('%s_meshing.lgi',mesh_prefix);
            obj.triangulate_command = sprintf('lagrit < %s > %s_lg_triangulate_output.txt',obj.triangulate_filename,obj.mesh_prefix);
            obj.meshing_command = sprintf('lagrit < %s > %s_lg_meshing_output.txt',obj.meshing_filename,obj.mesh_prefix);
        end

        function obj = get_xy_limits(obj)
            % load x and y limits from the seafloor surface file
            temp = importdata(obj.seafloor_filename);  
            obj.xlims = [min(temp(:,1)) max(temp(:,1))];
            obj.ylims = [min(temp(:,2)) max(temp(:,2))];

        end

        function obj = set_z_limits(obj,zmin,zmax)
            % set the z limits for the model
            obj.zlims = [zmin zmax];
        end

        function obj = create_triangulate_script(obj)
            %METHOD1 Summary of this method goes here
            %   Detailed explanation goes here
            fid = fopen(obj.triangulate_filename,'w+');

            strings={...
                ['# Triangulate the surfaces that define model geometry'],...
                ['#'],...
                ['define / SURF_PTS / ',obj.model_base_filename],...
                ['define / MO / mo_s1'],...
                [''],...
                ['cmo / create / MO / / / triplane'],...
                ['cmo / addatt / MO / z_attribute / vdouble / scalar / nnodes'],...
                ['cmo / readatt / MO / xic yic z_attribute / 1 0 0 / SURF_PTS'],...
                ['cmo / setatt / MO / zic / 1 0 0 / 0.0'],...
                ['cmo / setatt / MO / imt / 1 0 0 / 1'],...
                ['# Connect/triangulate the vertices'],...
                ['connect'],...
                ['# Copy the z coordinate, which is in the vertex attribute z_attribute, into the zic coordinate'],...
                ['cmo / copyatt / MO / MO / zic / z_attribute'],...
                ['cmo / printatt / MO / -xyz- / minmax'],...
                ['################'],...
                ['define / SURF_PTS / ',obj.crust_bottom_filename],...
                ['define / MO / mo_s2'],...
                [''],...
                ['cmo / create / MO / / / triplane'],...
                ['cmo / addatt / MO / z_attribute / vdouble / scalar / nnodes'],...
                ['cmo / readatt / MO / xic yic z_attribute / 1 0 0 / SURF_PTS'],...
                ['cmo / setatt / MO / zic / 1 0 0 / 0.0'],...
                ['cmo / setatt / MO / imt / 1 0 0 / 1'],...
                ['# Connect/triangulate the vertices'],...
                ['connect'],...
                ['# Copy the z coordinate, which is in the vertex attribute z_attribute, into the zic coordinate'],...
                ['cmo / copyatt / MO / MO / zic / z_attribute '],...
                ['cmo / printatt / MO / -xyz- / minmax'],...
                ['################'],...
                ['define / SURF_PTS / ',obj.crust_top_filename],...
                ['define / MO / mo_s3'],...
                [''],...
                ['cmo / create / MO / / / triplane'],...
                ['cmo / addatt / MO / z_attribute / vdouble / scalar / nnodes'],...
                ['cmo / readatt / MO / xic yic z_attribute / 1 0 0 / SURF_PTS'],...
                ['cmo / setatt / MO / zic / 1 0 0 / 0.0'],...
                ['cmo / setatt / MO / imt / 1 0 0 / 1'],...
                ['# Connect/triangulate the vertices'],...
                ['connect'],...
                ['# Copy the z coordinate, which is in the vertex attribute z_attribute, into the zic coordinate'],...
                ['cmo / copyatt / MO / MO / zic / z_attribute '],...
                ['cmo / printatt / MO / -xyz- / minmax'],...
                ['################'],...
                ['define / SURF_PTS / ',obj.seafloor_filename],...
                ['define / MO / mo_s4'],...
                [''],...
                ['cmo / create / MO / / / triplane'],...
                ['cmo / addatt / MO / z_attribute / vdouble / scalar / nnodes'],...
                ['cmo / readatt / MO / xic yic z_attribute / 1 0 0 / SURF_PTS'],...
                ['cmo / setatt / MO / zic / 1 0 0 / 0.0'],...
                ['cmo / setatt / MO / imt / 1 0 0 / 1'],...
                ['# Connect/triangulate the vertices'],...
                ['connect'],...
                ['# Copy the z coordinate, which is in the vertex attribute z_attribute, into the zic coordinate'],...
                ['cmo / copyatt / MO / MO / zic / z_attribute '],...
                ['cmo / printatt / MO / -xyz- / minmax'],...
                ['################'],...
                ['# Let''s see what we have:'],...
                ['#'],...
                ['cmo / status / brief'],...
                ['dump / avs / s1.inp / mo_s1'],...
                ['dump / avs / s2.inp / mo_s2'],...
                ['dump / avs / s3.inp / mo_s3'],...
                ['dump / avs / s4.inp / mo_s4'],...
                [''],...
                [''],...
                [''],...
                ['finish']};

            %Write output
            disp(['Writing output to: ',obj.triangulate_filename])

            fprintf(fid,'%s\n',strings{1:end-1});
            fprintf(fid,'%s',strings{end});
            fclose(fid);
        end

        function obj = create_meshing_script(obj)
            fid = fopen(obj.meshing_filename,'w+');

            strings={...
                ['#'],...
                ['# Build the computational mesh'],...
                ['#'],...
                [sprintf('define / XMIN / %.2e', obj.xlims(1))],...
                [sprintf('define / XMAX / %.2e', obj.xlims(2))],...
                [sprintf('define / YMIN / %.2e', obj.ylims(1))],...
                [sprintf('define / YMAX / %.2e', obj.ylims(2))],...
                [sprintf('define / ZMIN / %.2e', obj.zlims(1))],...
                [sprintf('define / ZMAX / %.2e', obj.zlims(2))],...
                [''],...
                ['# Define resolution'],...
                [sprintf('define / NX / %d', obj.nx)],...
                [sprintf('define / NY / %d', obj.ny)],...
                [sprintf('define / NZ / %d', obj.nz)],...
                ['#'],...
                ['cmo / create / mohex / / / hex'],...
                ['createpts / brick / xyz / NX NY NZ / XMIN YMIN ZMIN / XMAX YMAX ZMAX / 1 1 1'],...
                ['cmo / printatt / mohex / -xyz- / minmax'],...
                ['#'],...
                ['dump / avs / tmp_mesh_01.inp / mohex'],...
                ['#'],...
                ['# Refine the mesh around the basalt interfaces, s2, s3'],...
                ['#'],...
                ['read / avs / s2.inp / mo_s2'],...
                ['read / avs / s3.inp / mo_s3'],...
                ['#'],...
                ['# Merge the two surfaces into a single mesh object'],...
                ['#'],...
                ['addmesh / merge / mo_s2_s3 / mo_s2 mo_s3'],...
                ['#'],...
                ['# Intersect the surfaces with the hex mesh and refine cells that intersect the surfaces'],...
                ['#'],...
                ['intersect_elements / mohex / mo_s2_s3 / if_intersect'],...
                ['#'],...
                ['eltset / erefine / if_intersect / gt 0'],...
                ['#'],...
                ['# refine the cells that intersect'],...
                ['#'],...
                ['refine / eltset / eltset get erefine'],...
                ['#'],...
                ['dump / avs / tmp_mesh_refine1.inp / mohex'],...
                ['#'],...
                ['# Intersect and refine again'],...
                ['#'],...
                ['cmo / DELATT / mohex / if_intersect'],...
                ['intersect_elements / mohex / mo_s2_s3 / if_intersect'],...
                ['eltset / erefine / if_intersect / gt 0'],...
                ['refine / eltset / eltset get erefine'],...
                ['dump / avs / tmp_mesh_refine2.inp / mohex'],...
                [''],...
                ['cmo / DELATT / mohex / if_intersect'],...
                ['intersect_elements / mohex / mo_s2_s3 / if_intersect'],...
                ['eltset / erefine / if_intersect / gt 0'],...
                ['refine / eltset / eltset get erefine'],...
                ['dump / avs / tmp_mesh_refine3.inp / mohex'],...
                ['#'],...
                ['# Get rid of mesh object that is no longer needed.'],...
                ['cmo / delete / mo_s2_s3'],...
                ['#'],...
                ['# Now turn the octree mesh into an FEHM mesh'],...
                ['#'],...
                ['grid2grid / tree_to_fe / mohex_notree / mohex'],...
                ['dump / avs / tmp_mesh_refine3a.inp / mohex_notree'],...
                ['#'],...
                ['cmo / create / motet / / / tet'],...
                ['copypts / motet / mohex_notree'],...
                ['connect'],...
                ['resetpts / itp'],...
                ['dump / avs / tmp_tet.inp / motet'],...
                ['#'],...
                ['# Now color the vertices using the surfaces'],...
                ['#'],...
                ['surface / surf_s2 / reflect / sheet / mo_s2'],...
                ['surface / surf_s3 / reflect / sheet / mo_s3'],...
                [''],...
                ['region / r1 / le surf_s2'],...
                ['region / r2 / gt surf_s2 and le surf_s3'],...
                ['region / r3 / gt surf_s3'],...
                [''],...
                ['pset / p1 / region r1'],...
                ['pset / p2 / region r2'],...
                ['pset / p3 / region r3'],...
                [''],...
                ['cmo / setatt / motet / imt / 1 0 0 / 4'],...
                ['cmo / setatt / motet / imt / pset get p1 / 1'],...
                ['cmo / setatt / motet / imt / pset get p2 / 2'],...
                ['cmo / setatt / motet / imt / pset get p3 / 3'],...
                [''],...
                ['dump / avs / ',obj.mesh_prefix,'.inp',' / motet'],...
                [''],...
                ['dump / fehm / ', obj.mesh_prefix,' / motet'],...
                ['finish']};

            %Write output
            disp(['Writing output to: ',obj.meshing_filename])

            fprintf(fid,'%s\n',strings{1:end-1});
            fprintf(fid,'%s',strings{end});
            fclose(fid);


        end

        function obj = run_triangulate(obj)
            system(sprintf('%s',obj.triangulate_command));
        end

        function obj = run_meshing(obj)
            system(sprintf('%s',obj.meshing_command));
        end

    end
end